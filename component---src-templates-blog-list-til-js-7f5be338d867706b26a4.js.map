{"version":3,"sources":["webpack:///./src/components/TilListItem.js","webpack:///./src/components/TilList.js","webpack:///./src/templates/blog-list-til.js","webpack:///./src/components/TagList.js","webpack:///./src/components/PostsListItem.js","webpack:///./src/components/PostsList.js","webpack:///./src/components/Pagination.js","webpack:///./src/templates/blog-list-template.js"],"names":["Post","styled","article","PostHeader","header","Excerpt","p","PostTitleLink","Link","TilListItem","props","title","excerpt","type","slug","language","tags","timeToRead","hero","cover","date","to","dangerouslySetInnerHTML","__html","TilList","posts","defaultLang","useSiteMetadata","map","post","node","frontmatter","key","BlogListTil","render","this","data","edges","location","SEO","Wrapper","React","Component","ListContainer","div","TagListItemLink","TagListItem","span","TagList","noLink","tag","i","length","ReadPost","FooterLine","PostsListItem","style","src","publicURL","min","aria-label","PostsList","PaginationWrapper","nav","PageBtn","PreviousBtn","NextBtn","Spacer","PageInfo","Pagination","currentPage","nbPages","previousUrl","className","PageTitle","h2","PageTitleHr","hr","BlogList","pageContext"],"mappings":"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","file":"component---src-templates-blog-list-til-js-7f5be338d867706b26a4.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\nconst Post = styled.article`\n  padding-bottom: 0.5rem;\n`\nconst PostHeader = styled.header`\n  padding: 1em 0;\n`\n\nconst Excerpt = styled.p`\n  line-height: 1.45;\n  padding-bottom: 0.5em;\n  color: darkgray;\n`\n\nconst PostTitleLink = styled(Link)`\n  color: var(--color-h2);\n  &:hover {\n    border-bottom: 1px dotted var(--color-text);\n  }\n`\n\nconst TilListItem = props => {\n  const { title, type, excerpt, slug, language, tags, timeToRead, hero, cover, date } = props\n  return (\n    <Post>\n      <PostHeader>\n        <h2>\n          <PostTitleLink to={`/${slug}`}>\n            {title}\n          </PostTitleLink>\n        </h2>\n      </PostHeader>\n\n      <section>\n        <Excerpt dangerouslySetInnerHTML={{ __html: excerpt }} />\n      </section>\n    </Post>\n  )\n}\nexport default TilListItem\n","import React, { Fragment } from 'react'\n\nimport useSiteMetadata from '../hooks/use-site-config'\nimport TilListItem from \"./TilListItem\";\n\nconst TilList = ({ posts }) => {\n  const { defaultLang } = useSiteMetadata()\n\n  return (\n    <Fragment>\n      {posts.map(post => {\n        const props = {\n          title: post.node.frontmatter.title,\n          type: post.node.frontmatter.type,\n          excerpt: post.node.excerpt,\n          slug: post.node.frontmatter.slug,\n          timeToRead: post.node.timeToRead,\n          language: post.node.frontmatter.language || defaultLang,\n          tags: post.node.frontmatter.tags || [],\n          hero: post.node.frontmatter.hero,\n          cover: post.node.frontmatter.cover,\n          date: post.node.frontmatter.date,\n        }\n        return <TilListItem key={props.slug} {...props} />\n      })}\n    </Fragment>\n  )\n}\nexport default TilList\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Wrapper from '../components/Wrapper'\nimport SEO from '../components/SEO'\nimport {PageTitle, PageTitleHr} from \"./blog-list-template\";\nimport TilList from \"../components/TilList\";\n\nclass BlogListTil extends React.Component {\n  render() {\n    const posts = this.props.data.posts.edges\n\n    return (\n      <Layout location={this.props.location}>\n        <SEO />\n\n        <Wrapper>\n          <PageTitle>TIL</PageTitle>\n          <PageTitleHr/>\n          <TilList posts={posts} />\n        </Wrapper>\n\n      </Layout>\n    )\n  }\n}\n\nexport default BlogListTil\n\nexport const pageQuery = graphql`\n    {\n      site {\n        siteMetadata {\n          title\n          description\n        }\n      }\n      posts: allMdx(sort: {order: ASC, fields: [frontmatter___title]}, filter: {fileAbsolutePath: {regex: \"/content/til/\"}, frontmatter: {published: {ne: false}, unlisted: {ne: true}}}) {\n        edges {\n          node {\n            excerpt\n            timeToRead\n            frontmatter {\n              title\n              type\n              tags\n              language\n              slug\n              hero\n              date\n              cover {\n                publicURL\n              }\n            }\n          }\n        }\n      }\n    }\n`\n","import React, { Fragment } from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\nconst ListContainer = styled.div`\n  display: inline;\n  color: var(--color-textSecondary);\n`\n\nconst TagListItemLink = styled(Link)`\n  text-transform: uppercase;\n  color: var(--color-textSecondary);\n\n  &:not(:first-child) {\n    margin-left: 0.3rem;\n  }\n\n  &:hover {\n    border-bottom: 1px dotted var(--color-textSecondary);\n  }\n  &:before {\n    content: '#';\n  }\n`\n\nconst TagListItem = styled.span`\n  text-transform: uppercase;\n  color: var(--color-textSecondary);\n  &:not(:first-child) {\n    margin-left: 0.3rem;\n  }\n  &:before {\n    content: '#';\n  }\n`\n\nclass TagList extends React.Component {\n  render() {\n    const { tags, noLink } = this.props\n\n    return (\n      <ListContainer>\n        {tags.map((tag, i) => {\n          return (\n            <Fragment key={`tag-list-${i}`}>\n              {!noLink && (\n                <TagListItemLink to={`/tags/${tag}`}>{tag}</TagListItemLink>\n              )}\n              {noLink && <TagListItem to={`/tags/${tag}`}>{tag}</TagListItem>}\n              {i < tags.length - 1 ? ', ' : ''}\n            </Fragment>\n          )\n        })}\n      </ListContainer>\n    )\n  }\n}\n\nexport default TagList\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport TagList from './TagList'\nimport useSiteMetadata from '../hooks/use-site-config'\nimport styled from 'styled-components'\nimport { Bull, ReadingTime } from './Commons'\n\nconst Post = styled.article`\n  border-bottom: 1px solid rgba(214, 209, 230, 0.5);\n  padding-bottom: 1.25rem;\n  margin-bottom: 1.5rem;\n`\n\nconst ReadPost = styled(Link)`\n  display: block;\n  font-size: 0.75rem;\n  margin-top: 1rem;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  line-height: 2;\n  color: var(--color-text);\n\n  &:hover {\n    background-color: var(--color-grey600);\n    border-radius: 0.25rem;\n    color: var(--color-white);\n  }\n`\n\nconst PostHeader = styled.header`\n  padding: 1em 0;\n`\n\nconst Excerpt = styled.p`\n  line-height: 1.45;\n  padding-bottom: 0.5em;\n  color: darkgray;\n`\n\nconst PostTitleLink = styled(Link)`\n  color: var(--color-h2);\n  &:hover {\n    border-bottom: 1px dotted var(--color-text);\n  }\n`\n\nconst FooterLine = styled.div`\n  font-size: 0.8em;\n`\n\nconst PostsListItem = props => {\n  const { title, type, excerpt, slug, language, tags, timeToRead, hero, cover } = props\n  const { defaultLang } = useSiteMetadata()\n\n  const heroStyle = {\n    \"margin-bottom\" : \"25px\",\n  }\n\n  return (\n    <Post>\n      <PostHeader>\n      { hero && (\n        <div style={heroStyle}>\n        <img src={hero || (cover && cover.publicURL)} />\n      </div>\n      )} \n      \n        <h2>\n          <PostTitleLink to={`/${slug}`}>\n            {/* {defaultLang !== language && <Flag language={language} />} */}\n            {title}\n          </PostTitleLink>\n        </h2>\n      </PostHeader>\n\n      <section>\n        <Excerpt dangerouslySetInnerHTML={{ __html: excerpt }} />\n      </section>\n\n      <footer>\n        <FooterLine>\n          <ReadingTime min={timeToRead} />\n          <Bull />\n          <TagList tags={tags} />\n        </FooterLine>\n        <ReadPost to={`/${slug}`} aria-label={`View ${title} article`}>\n          Read post ›\n        </ReadPost>\n      </footer>\n    </Post>\n  )\n}\nexport default PostsListItem\n","import React, { Fragment } from 'react'\n\nimport PostsListItem from './PostsListItem'\nimport useSiteMetadata from '../hooks/use-site-config'\n\nconst PostsList = ({ posts }) => {\n  const { defaultLang } = useSiteMetadata()\n\n  return (\n    <Fragment>\n      {posts.map(post => {\n        const props = {\n          title: post.node.frontmatter.title,\n          type: post.node.frontmatter.type,\n          excerpt: post.node.excerpt,\n          slug: post.node.frontmatter.slug,\n          timeToRead: post.node.timeToRead,\n          language: post.node.frontmatter.language || defaultLang,\n          tags: post.node.frontmatter.tags || [],\n          hero: post.node.frontmatter.hero,\n          cover: post.node.frontmatter.cover,\n        }\n        return <PostsListItem key={props.slug} {...props} />\n      })}\n    </Fragment>\n  )\n}\nexport default PostsList\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\nconst PaginationWrapper = styled.nav`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin-top: 4em;\n  justify-content: space-between;\n  width: 80%;\n  max-width: 770px;\n  padding: 25px 0;\n  margin: 0px auto;\n\n  @media (max-width: 780px) {\n    width: 90%;\n    padding: 25px 0;\n  }\n`\n\nconst PageBtn = styled(Link)`\n  border-radius: 3px;\n  background-color: var(--color-primary);\n  border: 1px solid var(--color-primary);\n  color: var(--color-white);\n  padding: 8px 20px;\n  min-width: 130px;\n\n  &:hover {\n    background-color: var(--color-white);\n    color: var(--color-primary);\n    border: 1px solid var(--color-primary);\n  }\n\n  @media (max-width: 564px) {\n    margin-top: 10px;\n    width: 100%;\n  }\n`\n\nconst PreviousBtn = styled(PageBtn)`\n  order: 1;\n  @media (max-width: 564px) {\n    order: 2;\n  }\n`\n\nconst NextBtn = styled(PageBtn)`\n  order: 3;\n`\n\nconst Spacer = styled.span`\n  display: block;\n  min-width: 130px;\n\n  &.previous {\n    order: 1;\n  }\n\n  &.next {\n    order: 3;\n  }\n\n  @media (max-width: 564px) {\n    display: none;\n\n    &.previous {\n      order: 2;\n    }\n\n    &.next {\n      order: 3;\n    }\n  }\n`\n\nconst PageInfo = styled.span`\n  order: 2;\n  padding: 1em 0;\n  @media (max-width: 564px) {\n    order: 1;\n  }\n`\n\nclass Pagination extends React.Component {\n  render() {\n    const { currentPage, nbPages } = this.props\n    const previousUrl = currentPage === 2 ? '/' : `/pages/${currentPage - 1}`\n\n    return (\n      <PaginationWrapper>\n        {currentPage !== 1 ? (\n          <PreviousBtn to={previousUrl}>‹ Newer posts</PreviousBtn>\n        ) : (\n          <Spacer className=\"previous\" />\n        )}\n\n        <PageInfo>\n          Page {currentPage} of {nbPages}\n        </PageInfo>\n\n        {currentPage < nbPages ? (\n          <NextBtn to={`/pages/${currentPage + 1}`}>Older posts ›</NextBtn>\n        ) : (\n          <Spacer className=\"next\" />\n        )}\n      </PaginationWrapper>\n    )\n  }\n}\n\nexport default Pagination\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Wrapper from '../components/Wrapper'\nimport PostsList from '../components/PostsList'\nimport Pagination from '../components/Pagination'\nimport SEO from '../components/SEO'\nimport styled from 'styled-components'\n\nexport const PageTitle = styled.h2`\n`\nexport const PageTitleHr = styled.hr`\n  margin: 20px 0 10px 0;\n`\n\nclass BlogList extends React.Component {\n  render() {\n    const posts = this.props.data.posts.edges\n    const { pageContext } = this.props\n\n    return (\n      <Layout location={this.props.location}>\n        <SEO />\n        {/* <HeroMain title={title} subTitle={description} /> */}\n        <Wrapper>\n          <PageTitle>All Posts</PageTitle>\n          <PageTitleHr/>\n          <PostsList posts={posts} />\n        </Wrapper>\n\n        <Pagination\n          nbPages={pageContext.nbPages}\n          currentPage={pageContext.currentPage}\n        />\n      </Layout>\n    )\n  }\n}\n\nexport default BlogList\n\nexport const pageQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    posts: allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        fileAbsolutePath: {regex: \"/content/posts/|/content/til/\"}\n        frontmatter: { published: { ne: false }, unlisted: { ne: true } }\n      }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            type\n            tags\n            language\n            slug\n            hero\n            cover {\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}