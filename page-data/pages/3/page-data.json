{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/pages/3","result":{"data":{"site":{"siteMetadata":{"title":"아웃풋 트레이닝","description":"자바 둘 타세요-에서 자바 인력1을 맡고 있습니다."}},"posts":{"edges":[{"node":{"excerpt":"객체지향 애플리케이션의 중심 사상은 연쇄적으로 메시지를 전송하고 수신하는 객체들 사이의 협력 관계를 기반으로 사용자에게 유용한 기능을 제공하는 것이다. 클래스 기반의 객체지향 언어를 사용하는 대부분의 사람들은 객체지향 애플리케이션을 클래스의 집합으로 생각한다. 프로그래머 입장에서는 클래스는 실제로 볼 수 있고 수정할 수 있는 구체적인 존재다. 대부분의 입문자들은 클래스 간의 상속 관계가 객체지향 설계를 가치 있게 만드는 핵심적인 매커니즘이라고 배운다. 하지만 객체지향의 강력함은 클래스가 아니라 객체들이 주고받는 메시지로부터 나온다. 객체지향의 애플리케이션은 클래스를 이용해 만들어지지만 메시지를 통해 정의된다.","timeToRead":5,"frontmatter":{"title":"객체지향을 한 단어로 설명한다면 그것은 클래스가 아니라 메시지이다","type":null,"tags":["OOP"],"language":null,"slug":"post/22/","hero":"/assets/images/post/2020/2020_022.png","cover":null}}},{"node":{"excerpt":"Spring Framework Triangle이라 불리는 스프링 프레임워크 핵심 3요소 IoC(역전 제어), AOP(관심 지향 프로그래밍), PSA(서비스 추상화)를 다룰 예정입니다.\n그 전에 DI…","timeToRead":2,"frontmatter":{"title":"Spring Framework에서 의존성을 주입받는 방법 3가지 - DI / Dependency Injection","type":null,"tags":["Spring Framework","Spring Framework DI","Spring Framework IoC"],"language":null,"slug":"post/21/","hero":"/assets/images/post/2020/2020_021.png","cover":null}}},{"node":{"excerpt":"아파치 카프카는 여러 대의 분산 서버에서 대량의 데이터를 처리하는 분산 메시징 시스템입니다. 메시지를 받고, 받은 메시지를 다른 시스템이나 장치에 보내기 위해 사용하는데요, 높은 처리량과 실시간으로 대량의 데이터를 취급하기 위해 초점을 맞췄으나 이제는 기능과 신뢰성을 향상시켜 현재는 데이터가 들어오는 대로 순차 실행하는 플랫폼이 되고 있습니다. 이러한 카프카란 무엇인지 한 번 정리하는 시간을 가져보겠습니다 :)","timeToRead":6,"frontmatter":{"title":"Apache Kafka - 높은 처리량과 실시간으로 대량의 데이터를 취급하는 카프카","type":null,"tags":["Kafka"],"language":null,"slug":"post/20/","hero":"/assets/images/post/2020/2020_020.png","cover":null}}},{"node":{"excerpt":"어떤 문제에 직면했고, 어떤 방향으로 해결하는지 스토리를 담아 작성한 글은 설령 해당 기술의 버전이 바뀌었을지라도 미래의 나에게 문제 접근 해결 방식에 대한 영감을 줄 수 있다고 생각합니다. 그래서 저는 글쓰기를 시작하게 되었습니다. 앞으로 글또에 참여하며 꾸준히 글을 작성하려고 합니다.","timeToRead":2,"frontmatter":{"title":"글쓰는 또라이가 세상을 바꾼다 - 글또 4기에 참여해요","type":null,"tags":["글또"],"language":null,"slug":"post/19/","hero":"/assets/images/post/2020/2020_019.png","cover":null}}},{"node":{"excerpt":"보통 1년 회고를 연말에 많이 하는데, 올해부터는 매월을 보내고 하는 월말 회고를 시작하려고 합니다. 얼마 전 우연히 '월말 회고' 포스팅을 접했다가 꽤 좋은 아이디어라고 생각했고, 매월 작성하면 1년도 저절로 알차지지 않을까요?","timeToRead":2,"frontmatter":{"title":"월말회고 - 2020년 01월","type":null,"tags":["월말회고","retrospective"],"language":null,"slug":"post/18/","hero":"/assets/images/basic/001.png","cover":null}}},{"node":{"excerpt":"단순히 크롤링하는 라이브러리를 익혀보는 것으로 끝내기보다, 평소 갈증이 있었던 스터디 모집 새글 알림을 받도록하는 크롤링을 목표로 작은 프로젝트를 만들었습니다. Python + Github Issue + Github Actions를 이용하여 자동으로 스터디 모집 글을 모아 알림을 주는 크롤러를 함께 만들어요.","timeToRead":3,"frontmatter":{"title":"자동으로 스터디 모집 글을 모아 알림을 주는 파이썬 크롤러 만들기(with Github Actions)","type":null,"tags":["python crawler","github actions","python"],"language":null,"slug":"post/17/","hero":"/assets/images/post/2020/2020_017.png","cover":null}}},{"node":{"excerpt":"작년은 개발자로서 선뜻 털어놓기 어려웠던 고민이 많았던 한 해입니다. 해결하지 못한 고민들이 제 발목을 옥죄올 때 만난 책이 있습니다. 이 책은 마치 저를 기다린 것 같더군요. 제 고민들을 단 번에 해결해준 책 &lt;함께 자라기&gt;를 소개합니다.","timeToRead":6,"frontmatter":{"title":"털어놓기 어려웠던 개발자로서 고민을 해결해준 책, 함께 자라기","type":null,"tags":["book","agile"],"language":null,"slug":"post/16/","hero":"/assets/images/post/2020/2020_016.png","cover":null}}},{"node":{"excerpt":"get/set 지옥에서 벗어나는 ModelMapper lib를 소개합니다. 자바에서 DTO 컨버팅을 할 때 멤버 필드를 하나하나 명시해서 변환을 많이 하곤 합니다. 이럴 경우 휴먼 에러가 발생 할 확률이 매우 높습니다.","timeToRead":2,"frontmatter":{"title":"찾기 힘든 버그를 유발하는 Java DTO 컨버팅 노가다, 리팩토링하기","type":null,"tags":["java","modelmapper"],"language":null,"slug":"post/15/","hero":"/assets/images/post/2020/2020_015.png","cover":null}}},{"node":{"excerpt":"2~3년 전부터 작성하고 싶었던 한해 마무리 회고를 드디어 처음으로 작성한다. 매년 바쁘고 글감이 부족하단 이유로 흐지부지되었는데, 얼마 전 잠실 모각코 송년회 모임을 하면서 한해 회고를 가볍게 진행했다. 이때 작성한 회고를 좀 더 발전시켜 첫 회고 포스팅을 시작한다.","timeToRead":6,"frontmatter":{"title":"2019년 회고 - 처음 쓰는 한해 마무리 회고","type":null,"tags":["retrospective","diary"],"language":null,"slug":"post/14/","hero":"/assets/images/post/2019/2019_014.png","cover":null}}},{"node":{"excerpt":"마이크로서비스 아키텍처 구축의 후반부는 각각의 마이크로서비스를 같은 조직내에서 동일한 환경으로 배포 할 수 있는 방안을 찾는 것으로 시작한다. 무중단 배포로 서비스 다운타임을 없애 고객은 새로운 릴리즈가 적용되었는지 조차 모른다. 이후 배포된 서비스들을 모니터링하며 수 많은 마이크로서비스들을 아우르는 대규모 마이크로서비스에 대해 알아보자.","timeToRead":12,"frontmatter":{"title":"마이크로서비스 아키텍처 구축(2) - 배포와 모니터링를 거쳐 대규모 마이크로서비스","type":null,"tags":["book","msa"],"language":null,"slug":"post/13/","hero":"/assets/images/post/2019/2019_012.jpg","cover":null}}}]}},"pageContext":{"limit":10,"skip":20,"currentPage":3,"nbPages":5}},"staticQueryHashes":["1956263691","2749999020"]}