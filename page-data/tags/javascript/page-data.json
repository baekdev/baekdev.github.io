{"componentChunkName":"component---src-templates-tags-js","path":"/tags/javascript","result":{"data":{"posts":{"edges":[{"node":{"excerpt":"Array.prototype.reduce를 이용한 방식과 Promise.all/Promise.allSettled 방식은 프로미스 처리에 있어 중요한 차이점을 가지고 있다. 어떤 방식을 선택할지 결정하기 전에 각 방식의 특성을 이해하고 사용 사례를 고려해야 한다.","timeToRead":2,"frontmatter":{"title":"Promise를 이용한 비동기 순차 처리와 병렬 처리 핸들하기","tags":["javascript","promise"],"language":null,"slug":"post/48/"}}},{"node":{"excerpt":"실행 컨텍스트는 실행할 코드에 제공할 환경 보들을 모아놓은 객체로, 자바스크립트의 동적 언어로서의 성격을 가장 잘 파악할 수 있는 개념이다.","timeToRead":2,"frontmatter":{"title":"자바스크립의 실행 컨텍스트","tags":["javascript","execution environment","lexical environment","hoisting"],"language":null,"slug":"post/37/"}}},{"node":{"excerpt":"호이스팅이 개념이 나오게 된 배경은 자바스크립트가 함수를 실행하기 전에 반드시 선언되어야 한다는 여타 언어들과 달리 이 순서를 지키지 않아도 무방하도록 설계한 데서 유래한다. 정의되지 않은 함수를 어떻게 호출할 수 있는 것인지, 자바스크립트에는 마법이라도 있는 것일까? 이 호이스팅에 대해 자세히 알아보자.","timeToRead":2,"frontmatter":{"title":"예제로 만나보는 자바스크립트 호이스팅(hoisting)","tags":["javascript","hoisting"],"language":null,"slug":"post/36/"}}}]}},"pageContext":{"tag":"javascript"}},"staticQueryHashes":["1956263691","2749999020"]}